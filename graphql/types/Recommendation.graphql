type Seller {
  id: String
  name: String
  tax: Int
}

type Policy {
  id: String
  sellers: [Seller]
}

type Attribute {
  key: String
  value: String
}

type SKU {
  id: String
  reference: String
  oldPrice: Float
  price: Float
  policies: [Policy]
  attributes: [Attribute]
  stock: Int
  sellers: [Seller]
}

type ExtraData {
  key: String
  value: String
}

type Installment {
  interest: Boolean
  count: Int
  value: Float
}

type Image {
  name: String
  value: String
}

type Boost {
  newness: Float
  image: Float
  revenue: Float
  discount: Float
  click: Float
  availableSpecsCount: Float
  promotion: Float
  order: Float
}

type Product {
  id: String
  name: String
  product: String
  timestamp: String
  url: String
  link: String
  description: String
  reference: String
  price: Float
  oldPrice: Float
  skus: [SKU]
  year: Int
  brand: String
  brandId: String
  extraData: [ExtraData]
  installment: Installment
  measurementUnit: String
  unitMultiplier: Int 
  tax: Int
  categories: [String]
  stock: Int
  availableTradePolicies: [String]
  images: [Image]
  productSpecifications: [String]
  categoryIds: [String]
  boost: Boost
}

type Recommendation {
  """
  Items used as a basis for recommendation
  """
  base: [Product]
  """
  Recommended items
  """
  recommended: [Product]
}

type RecommendationResponse {
  recommendations: [Recommendation]
}

type RecommendationAPI {
  variantId: String
  response: RecommendationResponse
}

enum StrategyType {
  BEST_SELLERS
  MOST_POPULAR
  PRICE_REDUCTION
  NEW_RELEASES
  NAVIGATION_HISTORY
  RECOMMENDATION_HISTORY
  SIMILAR_PRODUCTS
  BEST_CHOICE
  BOUGHT_TOGETHER
  CART_HISTORY
  ORDER_HISTORY
}

enum RequestInputType {
  USER
  CATEGORY
  PRODUCT
  TAG_GROUP
  CAMPAIGN
  GROUP
  ANONYMOUS_USER
  BRAND
  STORE
}

input SortOption {
  field: String
  desc: Boolean
}

input Filter {
  type: String
  field: String
  value: String
}

input Count {
  minimum: Int!
  recommendations: Int!
}

input RecommendationOptions {
  count: Count
  sort: [SortOption]
  filter: [Filter]
}

input RecommendationRequest {
  strategy: StrategyType!
  input: {
    type: RequestInputType
    values: [String]
  }
  recommendation: RecommendationOptions
}

input RecommendationInput {
  sessionId: String!
  request: RecommendationRequest
}
