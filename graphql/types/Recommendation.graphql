type Offer {
  Installments: [Installment]
  Price: Float
  ListPrice: Float
  spotPrice: Float
  PriceWithoutDiscount: Float
  AvailableQuantity: Float
  Tax: Float
  taxPercentage: Float
  teasers: [Teaser]
  discountHighlights: [Discount]
  giftSkuIds: [String]
}

type Seller {
  sellerId: String
  sellerName: String
  addToCartLink: String
  sellerDefault: Boolean
  commertialOffer: Offer
}

type Installment {
  Value: Float
  InterestRate: Float
  TotalValuePlusInterestRate: Float
  NumberOfInstallments: Int
  Name: String
  PaymentSystemName: String
  PaymentSystemGroupName: String
}

type Discount {
  name: String
}

type Teaser {
  name: String
  conditions: TeaserCondition
  effects: TeaserEffects
}

type TeaserCondition {
  minimumQuantity: Int
  parameters: [TeaserValue]
}

type TeaserEffects {
  parameters: [TeaserValue]
}

type TeaserValue {
  name: String
  value: String
}

type Image {
  cacheId: ID
  imageId: ID
  imageLabel: String
  imageTag: String
  imageUrl: String
  imageText: String
}

type Video {
  videoUrl: String
}

type ClusterHighlight {
  id: ID
  name: String
}

type ProductClusters {
  id: ID
  name: String
}

type SkuSpecification {
  field: SKUSpecificationField
  values: [SKUSpecificationValue]
}

type SKUSpecificationField {
  originalName: String
  name: String
}

type SKUSpecificationValue {
  originalName: String
  name: String
}

type Reference {
  Key: String
  Value: String
}

type Property {
  name: String
  originalName: String
  values: [String]
}

type SKU {
  itemId: String
  name: String
  nameComplete: String
  complementName: String
  ean: String
  referenceId: [Reference]
  measurementUnit: String
  unitMultiplier: Float
  images: [Image]
  videos: [Video]
  sellers: [Seller]
  variations: [Property]
}

type SpecificationGroup {
  originalName: String
  name: String
  specifications: [SpecificationGroupProperty]
}

type SpecificationGroupProperty {
  originalName: String
  name: String
  values: [String]
}

type PriceRange {
  highPrice: Float
  lowPrice: Float
}

type ProductPriceRange {
  sellingPrice: PriceRange
  listPrice: PriceRange
}

type Benefit {
  featured: Boolean
  id: String
  name: String
  items: [BenefitItem]
  teaserType: String
}

type BenefitItem {
  benefitProduct: Product
  benefitSKUIds: [String]
  discount: Float
  minQuantity: Int
}

type Product {
  brand: String
  brandId: Int
  benefits: [Benefit]
  cacheId: String
  categories: [String]
  categoriesIds: [String]
  clusterHighlights: [ClusterHighlight]
  description: String
  items: [SKU]
  link: String
  linkText: String
  metaTagDescription: String
  priceRange: ProductPriceRange
  productClusters: [ProductClusters]
  productId: String
  productName: String
  productReference: String
  properties: [Property]
  skuSpecifications: [SkuSpecification]
  specificationGroups: [SpecificationGroup]
  titleTag: String
}

type Recommendation {
  """
  Items used as a basis for recommendation
  """
  base: [Product]
  """
  Recommended items
  """
  recommended: [Product]
}

type RecommendationResponse {
  recommendations: [Recommendation]
}

type RecommendationAPI {
  variantId: String
  response: RecommendationResponse
}

enum StrategyType {
  BEST_SELLERS
  MOST_POPULAR
  PRICE_REDUCTION
  NEW_RELEASES
  NAVIGATION_HISTORY
  RECOMMENDATION_HISTORY
  SIMILAR_PRODUCTS
  BEST_CHOICE
  BOUGHT_TOGETHER
  CART_HISTORY
  ORDER_HISTORY
}

enum RequestInputType {
  USER
  CATEGORY
  PRODUCT
  TAG_GROUP
  CAMPAIGN
  GROUP
  ANONYMOUS_USER
  BRAND
  STORE
}

input SortOption {
  field: String
  desc: Boolean
}

input Filter {
  field: String
  condition: String
  value: String
}

input Count {
  minimum: Int
  recommendations: Int
}

input RecommendationOptions {
  count: Count
  filter: [Filter]
  sort: [SortOption]
}

input InputType {
  primary: RequestInputType
}

input Input {
  type: InputType
  values: [String]
}

input RecommendationInput {
  sessionId: String!
  strategy: StrategyType!
  input: Input
  recommendation: RecommendationOptions
}
